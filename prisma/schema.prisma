generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String? @unique
  password String?
  phone String? @unique
  github_id String? @unique
  avatar String? 
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // SMSToken과의 관계 필드
  Tokens SMSToken[]

  Products Product[]
  Posts Post[]
  Comment Comment[]
  Likes Like[]

  chat_rooms ChatRoom[]
  messages Message[]

  liveStream LiveStream[]
  liveStreamMessage LiveChatMessage[]

}

model SMSToken {
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  token String @unique
  
  // User와의 관계 필드
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int 
}

model Product {
  id Int @id @default(autoincrement())
  title String  
  price Float 
  description String
  photo String 
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId Int

  status String @default("SALE")

}

model Post {
  id Int @id @default(autoincrement())
  title String
  description String?
  views Int @default(0)//field에서 조회수를 카운트 -> 0부터 시작
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId Int

  Comments Comment[]
  Like Like[]

}

model Like {
 @@id(name : "id", [userId, postId]) 

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId Int

  post Post @relation(fields: [postId], references: [id],onDelete: Cascade)
  postId Int

}

model Comment {
  id Int @id @default(autoincrement())
  payload String

   user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId Int

  post Post @relation(fields: [postId], references: [id],onDelete: Cascade)
  postId Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

}

//live chat

model ChatRoom {
  id    String @id @default(cuid())
  users User[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
}

model Message {
  id      Int    @id @default(autoincrement())
  payload String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  room       ChatRoom @relation(fields: [chatRoomId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  chatRoomId String
  userId     Int
  isRead Boolean @default(false)
  lastReadAt DateTime?
}

model LiveStream {
  id Int @id @default(autoincrement())
  title String
  description String?

  stream_key String
  stream_id String

 created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user       User     @relation(fields: [userId], references: [id])
  userId     Int

  LiveChatMessage LiveChatMessage[]

}

model LiveChatMessage {
  id          Int         @id @default(autoincrement())
  payload     String
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  
  liveStream  LiveStream   @relation(fields: [streamId], references: [id])
  streamId    Int          // LiveStream의 id를 참조하는 외래 키
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
}

